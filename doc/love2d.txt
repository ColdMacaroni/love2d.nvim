================================================================================
INTRODUCTION                                                          *love2d*

love2d.nvim is a simple plugin to help you develop games using LÖVE.
This version is a fork of S1M0N38's plugin, make sure to check it out!

Table of contents:

1. SETUP: Install and setup the plugin.                         |love2d-setup|
2. LUA API: User functions provided by the plugin.                |love2d-api|
3. LSP: Explaining LSP support for LÖVE.                          |love2d-lsp|
4. GLSL: Notes about GLSL and tree-sitter support.               |love2d-glsl|


================================================================================
SETUP                                                           *love2d-setup*

It's highly recommended to use a plugin manager to install love2d.nvim. For
example, using `lazy.nvim`:

>lua
    {
      "ColdMacaroni/love2d.nvim",
      init = function()
        -- Set vim.g.love2d_opts here
      end,
    }
<

Usually, in the installation example, the plugin author provides the bare
minimum setup. However, love2d.nvim has very few options so it makes sense to
discuss them here. Here is the breakdown of the previous example:

- `ColdMacaroni/love2d.nvim`: Where to download the plugin hosted on GitHub.
- `init`: This function is called when nvim starts up, in it you can set the
  options to be read by this plugin during runtime.


================================================================================
OPTIONS                                                       *love2d-options*
                                                               *g:love2d_opts*
  `love2D.nvim` reads this table to get its settings. You may set it like

>vim
    let g:love2d_opts = { ... }
<

  or

>lua
    vim.g.love2d_opts = { ... }
<

  The default values are as follows:

>lua
  vim.g.love2d_opts = {
    love_binary = "love",
    love_libraries = {
      love2d = "{runtime}/love2d/library",
      luasocket = "{runtime}/luasocket/library",
    },
    restart_on_save = false,
  }
<

  - `love_binary`: The path to the `love` binary. If you have the `love`
    binary in your `PATH` you can leave this option empty. If you are using
    MacOS, you can add `love.app` to your `/Applications` and then set to
    `"/Applications/love.app/Contents/MacOS/love"`

  - `love_libraries`: `love2d.nvim` vendors LuaCATS annotations for the `love`
    namespace, and the `socket` library. This is what makes LSP work with LÖVE.
    It also adds the directory with the `main.lua` file automatically.
    It looks for these libraries in the runtime directories, finding the first
    match. This is represented as `{runtime}` in the example, but putting
    `{runtime}` in your configuration will NOT work.
    This plugin uses https://github.com/LuaCATS/love2d and
    https://github.com/LuaCATS/luasocket.

  - `restart_on_save`: Restart the game using |love2d.stop()| and
    |love2d.run()| when you save a file in the game project.

                                                         *g:love2d_is_project*
This plugin tries to find a main.lua file in the current or upward directories
to detect if you are currently editing a file in a love2d project. You may
also set this manually by setting `g:love2d_is_project` to `true` (`v:true`).

>lua
  vim.g.love2d_is_project = true
<

This variable will NOT get set by the plugin.

                                                     *g:love2d_lsp_configured*
This plugin uses `g:love2d_lsp_configured` as a guard variable to only
configure the LSP once. If you don't want this plugin to configure the
language server, set this variable to true before the `ftplugin/lua.lua` file
is loaded.

>lua
  vim.g.love2d_lsp_configured = true
<

================================================================================
LUA API                                                     *love2d-api*

  This plugin exposes two main functions to interact with LÖVE projects:

run({path})                                                     *love2d.run()*
  Runs the project asynchronously. This plugin only supports running ONE
  project at a time.

  Parameters:  ~
    • {path}  (`string?`) The path to the directory containing `main.lua`. If
      it's `nil`, the plugin will search for a `main.lua` file. It should work
      if you call this from a source file of your game.
      It may be useful to define a keymap to run a specific game, for example.


stop()                                                         *love2d.stop()*
  If you have previously started a game using `:LoveRun`, you can stop it
  using this command.


================================================================================
LSP                                                               *love2d-lsp*

Language Server Protocol (LSP) is the way to provide code completion, linting,
formatting, and other language-specific features to your editor. So it
effectively makes your editor smarter, enhancing your development experience.

This plugin does not setup LSP for you, but if you already have `lua_ls`
working using the `nvim-lspconfig` plugin, love2d.nvim will automatically
add the `love` namespace to the LSP.

For example, when placing the cursor over the `love` variable and pressing
`K`, you should see the documentation for the `love` namespace.


================================================================================
GLSL                                                             *love2d-glsl*

OpenGL Shading Language (GLSL) is a high-level shading language for writing
shaders. Shaders are small programs which are run on the graphics card when
drawing. See https://www.love2d.org/wiki/love.graphics.newShader section
"Shader Language" for love2d specific aliases.

This plugin adds additional queries for Treesitter to support inline GLSL in
specific places. For example, when calling `love.graphics.newShader()`.

For these queries to take effect, you need to have `lua` and `glsl` parsers
installed. The easiest way to do so is by using the plugin `nvim-treesitter` from
GitHub https://github.com/nvim-treesitter/nvim-treesitter. After installing
the plugin, you can run `:TSInstall lua glsl` to install parsers.

Doing so will enable Neovim to "understand" that the string inside
`love.graphics.newShader()` is not just a string, but `glsl` code. And you
will get:

1. Syntax highlighting for inline shaders.
2. If you have `Comment.nvim`, it will now properly comment inside shaders.
3. The plugin `nvim-treesitter-textobjects` will now work inside shaders.
4. And any other plugin/feature that depends on Treesitter.

If parsers are installed and the plugin is loaded, you should see the code below
properly highlighted! (You may have to execute |:edit| to refresh the current file)

>lua
  love.graphics.newShader([[
    vec4 effect(vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords)
    {
        vec4 texturecolor = VideoTexel(texture_coords);
        return texturecolor * color;
    }
  ]])
<

==============================================================================
 vim:tw=78:ts=8:et:ft=help:norl:
